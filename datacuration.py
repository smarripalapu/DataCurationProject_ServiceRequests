# -*- coding: utf-8 -*-
"""datacuration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14SMyCxTehfrH54bqaPA59aCKrzQhKtmT
"""

!pip install geopandas

!pip install geopy
!pip install utm

#from geopy.geocoders import GoogleV3
from geopy.geocoders import Nominatim
locator = Nominatim()
location = locator.geocode("Champ de Mars, Paris, France", timeout=10, exactly_one=False)

import pandas as pd
df = pd.read_csv("311Requests.csv")
df.dropna(subset=['STREET_ADDRESS']) #To make sure street address is not empty. Should handle invalid values
df['CITY'] = "Chicago"
df['STATE'] = "Illinois"
df.head()

import utm
import math
x,y,zone,dir = utm.from_latlon(41.728913, -87.632880)
print(x,y)

df['ADDRESS'] = df['STREET_ADDRESS']+","+df['CITY']+","+df['STATE']

from geopy.extra.rate_limiter import RateLimiter

# 1 - conveneint function to delay between geocoding calls
geocode = RateLimiter(locator.geocode, min_delay_seconds=1)
# 2- - create location column
df['GEOADR'] = df['ADDRESS'].apply(geocode)
# 3 - create longitude, laatitude and altitude from location column (returns tuple)
df['LOCATION_NEW'] = df['GEOADR'].apply(lambda loc: tuple(loc.point)[:2] if loc else None)

# 4 - split point column into latitude, longitude and altitude columns
#df.LOCATION.fillna(df.LOCATION_NEW, inplace=True)
df['LOCATION']=df['LOCATION_NEW']
df[['LATITUDE', 'LONGITUDE']] = pd.DataFrame(df['LOCATION'].tolist(), index=df.index)
df['X_COORDINATE_UTM','Y_COORDINATE_UTM'] = df['LOCATION'].apply(lambda loc: utm.from_latlon(tuple(loc)[0],tuple(loc)[1])[:2] if loc else None)
df[['X_COORDINATE_UTM','Y_COORDINATE_UTM']] = pd.DataFrame(df['X_COORDINATE_UTM','Y_COORDINATE_UTM'].tolist(), index=df.index)

#Drop unnecessary columns
del df['LOCATION_NEW'],df['GEOADR'],df['ADDRESS'],df['X_COORDINATE'],df['Y_COORDINATE'],df['SANITATION_DIVISION_DAYS'],df['X_COORDINATE_UTM','Y_COORDINATE_UTM'],df['ELECTRICAL_DISTRICT'],df['ELECTRICITY_GRID']

df.head()

from shapely.geometry import Polygon, LineString, Point,mapping
import shapely.wkt
import numpy as np

#Get data from other files to populate missing values based on location boundaries

policeBeats = pd.read_csv("PoliceBeatDec2012.csv")
policeBeats.head(2)

communityArea = pd.read_csv("CommAreas.csv")
communityArea.head(2)

wards = pd.read_csv("WARDS_2015.csv")
wards.head(2)

from shapely.geometry import shape
import math
import geopandas


for ind1,sr in df.iterrows():
  #Get missing police information from policeBeat data
  for ind2,rec in policeBeats.iterrows():
    P = shapely.wkt.loads(rec['the_geom'])
    pt = Point(sr['LONGITUDE'],sr['LATITUDE'])
    s = geopandas.GeoSeries([P])
    #spt = shape(pt)
    if(math.isnan(sr['POLICE_BEAT']) and pt.within(P)):
      df.loc[ind1,['POLICE_DISTRICT']] = rec['DISTRICT']
      df.loc[ind1,['POLICE_SECTOR']] = rec['SECTOR']
      df.loc[ind1,['POLICE_BEAT']] = rec['BEAT_NUM']
  
  #Get missing police information from CommAreas data
  for ind3,commA in communityArea.iterrows():
    P = shapely.wkt.loads(commA['the_geom'])
    pt = Point(sr['LONGITUDE'],sr['LATITUDE'])
    s = geopandas.GeoSeries([P])
    #spt = shape(pt)
    if(math.isnan(sr['COMMUNITY_AREA']) and pt.within(P)):
      df.loc[ind1,['COMMUNITY_AREA']] = commA['AREA_NUM_1']
  
  #Get missing ward information from wards2015 data
  for ind4,ward in wards.iterrows():
    P = shapely.wkt.loads(ward['the_geom'])
    pt = Point(sr['LONGITUDE'],sr['LATITUDE'])
    s = geopandas.GeoSeries([P])
    #spt = shape(pt)
    if(math.isnan(sr['WARD']) and pt.within(P)):
      df.loc[ind1,['WARD']] = ward['WARD']